// <auto-generated />
using System;
using System.Collections.Generic;
using BankAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BankAPI.Migrations
{
    [DbContext(typeof(ApiContext))]
    [Migration("20231229194716_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BankAPI.Data.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("AmountOfMoney")
                        .HasColumnType("double precision");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("BankAPI.Data.Entities.DebitCard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("DebitCards");
                });

            modelBuilder.Entity("BankAPI.Data.Entities.PartialPassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<int>>("Mask")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PartialPasswords");
                });

            modelBuilder.Entity("BankAPI.Data.Entities.SessionToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("SessionTokens");
                });

            modelBuilder.Entity("BankAPI.Data.Entities.Transfer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("AmountOfMoney")
                        .HasColumnType("double precision");

                    b.Property<int>("IssuerId")
                        .HasColumnType("integer");

                    b.Property<string>("IssuersAccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("IssuersBalanceAfter")
                        .HasColumnType("double precision");

                    b.Property<double>("IssuersBalanceBefore")
                        .HasColumnType("double precision");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<string>("ReceiversAccountNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("ReceiversBalanceAfter")
                        .HasColumnType("double precision");

                    b.Property<double>("ReceiversBalanceBefore")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("BankAPI.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CurrentPartialPassword")
                        .HasColumnType("integer");

                    b.Property<int>("CurrentTriesAmmount")
                        .HasColumnType("integer");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BankAPI.Data.Entities.Account", b =>
                {
                    b.HasOne("BankAPI.Data.Entities.User", null)
                        .WithOne("Account")
                        .HasForeignKey("BankAPI.Data.Entities.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankAPI.Data.Entities.DebitCard", b =>
                {
                    b.HasOne("BankAPI.Data.Entities.Account", null)
                        .WithMany("DebitCards")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankAPI.Data.Entities.PartialPassword", b =>
                {
                    b.HasOne("BankAPI.Data.Entities.User", null)
                        .WithMany("PartialPasswords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankAPI.Data.Entities.SessionToken", b =>
                {
                    b.HasOne("BankAPI.Data.Entities.User", null)
                        .WithMany("SessionTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankAPI.Data.Entities.Transfer", b =>
                {
                    b.HasOne("BankAPI.Data.Entities.Account", null)
                        .WithMany("Transfers")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BankAPI.Data.Entities.Account", b =>
                {
                    b.Navigation("DebitCards");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("BankAPI.Data.Entities.User", b =>
                {
                    b.Navigation("Account")
                        .IsRequired();

                    b.Navigation("PartialPasswords");

                    b.Navigation("SessionTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
